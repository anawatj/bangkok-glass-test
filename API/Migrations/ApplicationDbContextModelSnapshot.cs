// <auto-generated />
using System;
using Implements;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Domains.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "97b33437-52a3-46f1-867c-c310d3ef73e8",
                            CategoryName = "Cookies"
                        },
                        new
                        {
                            Id = "a53e48a5-e145-46fe-a59b-00811fb4307b",
                            CategoryName = "Crackers"
                        },
                        new
                        {
                            Id = "f4f4de08-f4b2-4ec6-9471-0af49fbf197b",
                            CategoryName = "Bars"
                        },
                        new
                        {
                            Id = "e0273c5f-5aa2-4fb7-a251-3190a01443c7",
                            CategoryName = "Snack"
                        });
                });

            modelBuilder.Entity("Core.Domains.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ca1563ed-a933-499c-be6e-c38f65cc66e6",
                            CityName = "Boston",
                            RegionId = "baa1f397-c98c-4c96-b69b-953833a6f844"
                        },
                        new
                        {
                            Id = "6631cdd2-2e26-4128-808c-b99a7a568353",
                            CityName = "New York",
                            RegionId = "baa1f397-c98c-4c96-b69b-953833a6f844"
                        },
                        new
                        {
                            Id = "1e57a5de-be7e-4c25-9c11-becbd81ffc9c",
                            CityName = "Los Angeles",
                            RegionId = "5a09f202-9faf-412a-98e3-44e85188cf77"
                        },
                        new
                        {
                            Id = "59d0a0c2-f34b-4397-882d-96f1c354070f",
                            CityName = "Santiago",
                            RegionId = "5a09f202-9faf-412a-98e3-44e85188cf77"
                        });
                });

            modelBuilder.Entity("Core.Domains.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RegionId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Core.Domains.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "af0b5805-0db4-4eb7-aa30-c6d97c5360b0",
                            CategoryId = "97b33437-52a3-46f1-867c-c310d3ef73e8",
                            ProductName = "Arrowroot",
                            UnitPrice = 2.18m
                        },
                        new
                        {
                            Id = "2373dba0-fb7e-49ed-8e31-35a860c5d21a",
                            CategoryId = "97b33437-52a3-46f1-867c-c310d3ef73e8",
                            ProductName = "Chocolate Chip",
                            UnitPrice = 1.87m
                        },
                        new
                        {
                            Id = "645c2070-63b3-4c67-8acf-2f6e5b6156ec",
                            CategoryId = "a53e48a5-e145-46fe-a59b-00811fb4307b",
                            ProductName = "Whole Wheat",
                            UnitPrice = 3.49m
                        },
                        new
                        {
                            Id = "cca4be31-8b1a-4ac7-900d-fc601a1bcf62",
                            CategoryId = "e0273c5f-5aa2-4fb7-a251-3190a01443c7",
                            ProductName = "Potato Chips",
                            UnitPrice = 1.35m
                        },
                        new
                        {
                            Id = "8c4de4d3-188f-4566-a116-0ca3f92d9be5",
                            CategoryId = "e0273c5f-5aa2-4fb7-a251-3190a01443c7",
                            ProductName = "Pretzels",
                            UnitPrice = 3.15m
                        },
                        new
                        {
                            Id = "b97ae87a-1d61-4120-ae0b-e248e3b9a02a",
                            CategoryId = "f4f4de08-f4b2-4ec6-9471-0af49fbf197b",
                            ProductName = "Carrot",
                            UnitPrice = 1.77m
                        },
                        new
                        {
                            Id = "8a17a631-2626-466c-b0e0-c1d398bb5737",
                            CategoryId = "f4f4de08-f4b2-4ec6-9471-0af49fbf197b",
                            ProductName = "Bran",
                            UnitPrice = 1.87m
                        });
                });

            modelBuilder.Entity("Core.Domains.Region", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "baa1f397-c98c-4c96-b69b-953833a6f844",
                            RegionName = "EAST"
                        },
                        new
                        {
                            Id = "5a09f202-9faf-412a-98e3-44e85188cf77",
                            RegionName = "WEST"
                        });
                });

            modelBuilder.Entity("Core.Domains.City", b =>
                {
                    b.HasOne("Core.Domains.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Core.Domains.Order", b =>
                {
                    b.HasOne("Core.Domains.Category", "Category")
                        .WithMany("Orders")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domains.City", "City")
                        .WithMany("Orders")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domains.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domains.Region", "Region")
                        .WithMany("Orders")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Product");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Core.Domains.Product", b =>
                {
                    b.HasOne("Core.Domains.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Core.Domains.Category", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Core.Domains.City", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Core.Domains.Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Core.Domains.Region", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
